name: GitOps Deployment Update

on:
  repository_dispatch:
    types: [update-deployments, simple-update]

permissions:
  contents: write

jobs:
  update-manifests:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout GitOps repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Update deployment manifests
        run: |
          echo "🚀 Processing GitOps deployment update..."
          
          # Extract dispatch payload
          SERVICES="${{ github.event.client_payload.services }}"
          VERSION_INFO="${{ github.event.client_payload.version_info }}"
          SOURCE_COMMIT="${{ github.event.client_payload.source_commit }}"
          REGISTRY="${{ github.event.client_payload.registry }}"
          WORKFLOW_RUN="${{ github.event.client_payload.workflow_run }}"
          
          echo "Services to update: $SERVICES"
          echo "Version info: $VERSION_INFO" 
          echo "Source commit: $SOURCE_COMMIT"
          echo "Registry: $REGISTRY"
          
          # Handle different event types
          if [ "${{ github.event.action }}" = "simple-update" ]; then
            echo "📋 Processing simple-update event"
            COMMIT_SHA="${{ github.event.client_payload.commit_sha }}"
          else
            echo "📋 Processing update-deployments event"
            # Parse deployments from payload
            DEPLOYMENTS='${{ toJson(github.event.client_payload.deployments) }}'
            echo "Deployments: $DEPLOYMENTS"
          fi
          
          # Update each service's manifest
          IFS=',' read -ra SERVICE_ARRAY <<< "$SERVICES"
          
          for service in "${SERVICE_ARRAY[@]}"; do
            echo "🔄 Updating $service manifest..."
            
            if [ "${{ github.event.action }}" = "simple-update" ]; then
              # Simple update: construct image from registry and commit
              NEW_IMAGE="${REGISTRY}/$service:$COMMIT_SHA"
            else
              # Complex update: extract from deployments JSON
              echo "🔍 Parsing deployments JSON for service: $service"
              echo "Raw deployments: $DEPLOYMENTS"
              
              # Parse the JSON string (it comes as a string, not object)
              DEPLOYMENTS_PARSED=$(echo "$DEPLOYMENTS" | jq -r '. // empty')
              if [ "$DEPLOYMENTS_PARSED" = "null" ] || [ -z "$DEPLOYMENTS_PARSED" ]; then
                # Try parsing as raw string
                DEPLOYMENTS_PARSED="$DEPLOYMENTS"
              fi
              
              NEW_IMAGE=$(echo "$DEPLOYMENTS_PARSED" | jq -r ".\"$service\".image // empty")
              COMMIT_SHA=$(echo "$DEPLOYMENTS_PARSED" | jq -r ".\"$service\".commit // empty")
              
              echo "Extracted - Image: $NEW_IMAGE, Commit: $COMMIT_SHA"
              
              if [ -z "$NEW_IMAGE" ] || [ "$NEW_IMAGE" = "null" ]; then
                echo "⚠️ No image found for service $service in deployments payload"
                echo "Available keys in deployments:"
                echo "$DEPLOYMENTS_PARSED" | jq -r 'keys[]?' 2>/dev/null || echo "Failed to parse keys"
                continue
              fi
            fi
            
            echo "📝 Updating $service to image: $NEW_IMAGE"
            
            # Update multiple OAM file locations
            # 1. Main OAM application file
            MAIN_OAM="oam/applications/application.yaml"
            
            # 2. Service-specific OAM files in vcluster directories
            VCLUSTER_OAM_FILES=$(find . -path "*/vcluster/*/applications/${service}/oam-application.yaml" 2>/dev/null)
            
            # 3. Look for any OAM file containing the service
            OTHER_OAM_FILES=$(grep -l "name: ${service}" oam/**/*.yaml 2>/dev/null || true)
            
            # Update main OAM file if it exists and contains the service
            if [ -f "$MAIN_OAM" ] && grep -q "name: ${service}" "$MAIN_OAM"; then
              echo "📄 Updating main OAM: $MAIN_OAM"
              echo "Current image line:"
              grep "image:" "$MAIN_OAM" | head -1
              # Update image - handle both with and without registry prefix
              sed -i "s|image: docker.io/socrates12345/${service}:.*|image: $NEW_IMAGE|g" "$MAIN_OAM"
              sed -i "s|image: ${service}:.*|image: $NEW_IMAGE|g" "$MAIN_OAM"
              echo "Updated image line:"
              grep "image:" "$MAIN_OAM" | head -1
              echo "✅ Updated main OAM manifest"
            fi
            
            # Update vCluster-specific OAM files
            if [ ! -z "$VCLUSTER_OAM_FILES" ]; then
              for oam_file in $VCLUSTER_OAM_FILES; do
                echo "📄 Updating vCluster OAM: $oam_file"
                sed -i "s|image: .*/${service}:.*|image: $NEW_IMAGE|g" "$oam_file"
                
                # Update version labels if they exist
                if [ ! -z "$COMMIT_SHA" ]; then
                  sed -i "s|version: .*|version: $COMMIT_SHA|g" "$oam_file"
                fi
                echo "✅ Updated vCluster OAM: $oam_file"
              done
            fi
            
            # Update any other OAM files containing the service
            if [ ! -z "$OTHER_OAM_FILES" ]; then
              for oam_file in $OTHER_OAM_FILES; do
                if [ "$oam_file" != "$MAIN_OAM" ]; then
                  echo "📄 Updating additional OAM: $oam_file"
                  sed -i "s|image: .*/${service}:.*|image: $NEW_IMAGE|g" "$oam_file"
                  echo "✅ Updated: $oam_file"
                fi
              done
            fi
            
            # Report if no files were found
            if [ ! -f "$MAIN_OAM" ] && [ -z "$VCLUSTER_OAM_FILES" ] && [ -z "$OTHER_OAM_FILES" ]; then
              echo "⚠️ Warning: Could not find any OAM files for $service"
              echo "Available OAM files:"
              find . -name "*.yaml" -path "*/oam/*" -o -path "*/vcluster/*" | head -20
            fi
          done

      - name: Commit and push changes
        run: |
          # Configure git
          git config user.name "GitOps Bot"
          git config user.email "gitops-bot@github.com"
          
          # Check if there are changes
          if git diff --quiet; then
            echo "ℹ️ No changes detected in GitOps manifests"
          else
            echo "📋 Changes detected:"
            git diff --name-only
            
            # Show what changed
            echo "📝 Detailed changes:"
            git diff
            
            # Commit changes
            git add .
            git commit -m "chore: update service deployments from source commit ${{ github.event.client_payload.source_commit }}

            Services updated: ${{ github.event.client_payload.services }}
            Source workflow: ${{ github.event.client_payload.workflow_run }}
            Triggered by: repository_dispatch
            
            Updated images:
            $(echo '${{ toJson(github.event.client_payload.deployments) }}' | jq -r 'to_entries[] | "- \(.key): \(.value.image)"' 2>/dev/null || echo "- Services: ${{ github.event.client_payload.services }}")"
            
            git push
            
            echo "✅ GitOps manifests updated and pushed successfully!"
            echo "🔄 ArgoCD will now detect and deploy the changes"
          fi

      - name: Summary
        run: |
          echo "## 🎯 GitOps Deployment Update Complete" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Services Updated:** ${{ github.event.client_payload.services }}" >> $GITHUB_STEP_SUMMARY
          echo "**Source Commit:** \`${{ github.event.client_payload.source_commit }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Registry:** ${{ github.event.client_payload.registry }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "🚀 **Next Steps:** ArgoCD will detect manifest changes and deploy to cluster" >> $GITHUB_STEP_SUMMARY
